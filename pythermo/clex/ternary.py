def ternary_corr_indices_corresponding_to_binary_corr(
    ternary_basis: dict, binary_basis: dict
) -> list[int]:
    """Find the ternary correlation indices which corresponds
    to binary correlations. This works only when both ternary_basis
    and binary_basis have the same cluster orbits with only
    difference being the occupation (binary or ternary)

    BE COMPLETELY AWARE OF WHAT YOU ARE DOING WHEN USING THIS
    FUNCTION

    Parameters
    ----------
    ternary_basis : dict
        ternary basis.json generated by casm
    binary_basis : dict
        binary basis.json generated by casm

    Returns
    -------
    list[int]
        list of ternary corr indices which corresponds
        to binary corrs

    """

    assert len(ternary_basis["orbits"]) == len(binary_basis["orbits"])

    ternary_corr_indices_corresponding_to_binary_corr = []
    ternary_corr_indices_without_binary_corr = []

    for binary_orbit, ternary_orbit in zip(
        binary_basis["orbits"], ternary_basis["orbits"]
    ):
        for ternary_function_dict in ternary_orbit["cluster_functions"]:
            ternary_function_notation = list(ternary_function_dict.values())[0]
            ternary_function_linear_index = list(ternary_function_dict.values())[1]

            for binary_function_dict in binary_orbit["cluster_functions"]:
                binary_function_notation = list(binary_function_dict.values())[0]

                if binary_function_notation == ternary_function_notation:
                    ternary_corr_indices_corresponding_to_binary_corr.append(
                        ternary_function_linear_index
                    )
                else:
                    ternary_corr_indices_without_binary_corr.append(
                        ternary_function_linear_index
                    )
    assert len(binary_basis["orbits"]) == len(
        ternary_corr_indices_corresponding_to_binary_corr
    )

    return (
        ternary_corr_indices_corresponding_to_binary_corr,
        ternary_corr_indices_without_binary_corr,
    )
